var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/twitterPlugin.ts
import {
  GameWorker,
  GameFunction,
  ExecutableGameFunctionResponse,
  ExecutableGameFunctionStatus
} from "@virtuals-protocol/game";
import TwitterApi from "twitter-api-v2";
var TwitterPlugin = class {
  constructor(options) {
    this.id = options.id || "twitter_worker";
    this.name = options.name || "Twitter Worker";
    this.description = options.description || "A worker that can post tweets";
    this.twitterClient = new TwitterApi({
      appKey: options.credentials.apiKey,
      appSecret: options.credentials.apiSecretKey,
      accessToken: options.credentials.accessToken,
      accessSecret: options.credentials.accessTokenSecret
    });
  }
  getWorker(data) {
    return new GameWorker({
      id: this.id,
      name: this.name,
      description: this.description,
      functions: (data == null ? void 0 : data.functions) || [
        this.searchTweetsFunction,
        this.replyTweetFunction,
        this.postTweetFunction,
        this.likeTweetFunction,
        this.quoteTweetFunction
      ],
      getEnvironment: (data == null ? void 0 : data.getEnvironment) || this.getMetrics.bind(this)
    });
  }
  getMetrics() {
    return __async(this, null, function* () {
      var _a, _b, _c, _d, _e, _f;
      const result = yield this.twitterClient.v2.me({
        "user.fields": ["public_metrics"]
      });
      return {
        followers: (_b = (_a = result.data.public_metrics) == null ? void 0 : _a.followers_count) != null ? _b : 0,
        following: (_d = (_c = result.data.public_metrics) == null ? void 0 : _c.following_count) != null ? _d : 0,
        tweets: (_f = (_e = result.data.public_metrics) == null ? void 0 : _e.tweet_count) != null ? _f : 0
      };
    });
  }
  get searchTweetsFunction() {
    return new GameFunction({
      name: "search_tweets",
      description: "Search tweets",
      args: [{ name: "query", description: "The search query" }],
      executable: (args, logger) => __async(this, null, function* () {
        try {
          if (!args.query) {
            return new ExecutableGameFunctionResponse(
              ExecutableGameFunctionStatus.Failed,
              "Query is required"
            );
          }
          logger(`Searching for: ${args.query}`);
          const tweets = yield this.twitterClient.v2.search(args.query, {
            max_results: 10,
            "tweet.fields": ["public_metrics"]
          });
          const feedbackMessage = "Tweets found:\n" + JSON.stringify(
            tweets.data.data.map((tweet) => {
              var _a, _b, _c;
              return {
                tweetId: tweet.id,
                content: tweet.text,
                likes: (_a = tweet.public_metrics) == null ? void 0 : _a.like_count,
                retweets: (_b = tweet.public_metrics) == null ? void 0 : _b.retweet_count,
                replyCount: (_c = tweet.public_metrics) == null ? void 0 : _c.reply_count
              };
            })
          );
          logger(feedbackMessage);
          return new ExecutableGameFunctionResponse(
            ExecutableGameFunctionStatus.Done,
            feedbackMessage
          );
        } catch (e) {
          return new ExecutableGameFunctionResponse(
            ExecutableGameFunctionStatus.Failed,
            "Failed to search tweets"
          );
        }
      })
    });
  }
  get replyTweetFunction() {
    return new GameFunction({
      name: "reply_tweet",
      description: "Reply to a tweet where your think is the most interesting",
      args: [
        { name: "tweet_id", description: "The tweet id" },
        { name: "reply", description: "The reply content" },
        {
          name: "reply_reasoning",
          description: "The reasoning behind the reply"
        }
      ],
      executable: (args, logger) => __async(this, null, function* () {
        try {
          if (!args.tweet_id || !args.reply) {
            return new ExecutableGameFunctionResponse(
              ExecutableGameFunctionStatus.Failed,
              "Tweet id and reply content are required"
            );
          }
          logger(`Replying [${args.tweet_id}]: ${args.reply}`);
          yield this.twitterClient.v2.reply(args.tweet_id, args.reply);
          return new ExecutableGameFunctionResponse(
            ExecutableGameFunctionStatus.Done,
            "Replied to tweet"
          );
        } catch (e) {
          return new ExecutableGameFunctionResponse(
            ExecutableGameFunctionStatus.Failed,
            "Failed to reply to tweet"
          );
        }
      })
    });
  }
  get postTweetFunction() {
    return new GameFunction({
      name: "post_tweet",
      description: "Post a tweet",
      args: [
        { name: "tweet", description: "The tweet content" },
        {
          name: "tweet_reasoning",
          description: "The reasoning behind the tweet"
        }
      ],
      executable: (args, logger) => __async(this, null, function* () {
        try {
          if (!args.tweet) {
            return new ExecutableGameFunctionResponse(
              ExecutableGameFunctionStatus.Failed,
              "Tweet content is required"
            );
          }
          logger(`Posting tweet: ${args.tweet}`);
          yield this.twitterClient.v2.tweet(args.tweet);
          return new ExecutableGameFunctionResponse(
            ExecutableGameFunctionStatus.Done,
            "Tweet posted"
          );
        } catch (e) {
          return new ExecutableGameFunctionResponse(
            ExecutableGameFunctionStatus.Failed,
            "Failed to post tweet"
          );
        }
      })
    });
  }
  get likeTweetFunction() {
    return new GameFunction({
      name: "like_tweet",
      description: "Like a tweet. Choose this when you want to support a tweet quickly, without needing to comment.",
      args: [{ name: "tweet_id", description: "The tweet id" }],
      executable: (args, logger) => __async(this, null, function* () {
        try {
          if (!args.tweet_id) {
            return new ExecutableGameFunctionResponse(
              ExecutableGameFunctionStatus.Failed,
              "Tweet id is required"
            );
          }
          logger(`Liking tweet id: ${args.tweet_id}`);
          const me = yield this.twitterClient.v2.me();
          yield this.twitterClient.v2.like(me.data.id, args.tweet_id);
          return new ExecutableGameFunctionResponse(
            ExecutableGameFunctionStatus.Done,
            "Tweet liked"
          );
        } catch (e) {
          return new ExecutableGameFunctionResponse(
            ExecutableGameFunctionStatus.Failed,
            "Failed to like tweet"
          );
        }
      })
    });
  }
  get quoteTweetFunction() {
    return new GameFunction({
      name: "quote_tweet",
      description: "Share someone else\u2019s tweet while adding your own commentary. Use this when you want to provide your opinion, analysis, or humor on an existing tweet while still promoting the original content. This will help with your social presence.",
      args: [
        { name: "tweet_id", description: "The tweet id" },
        { name: "quote", description: "The quote content" }
      ],
      executable: (args, logger) => __async(this, null, function* () {
        try {
          if (!args.tweet_id || !args.quote) {
            return new ExecutableGameFunctionResponse(
              ExecutableGameFunctionStatus.Failed,
              "Tweet id and quote content are required"
            );
          }
          logger(`Quoting [${args.tweet_id}]: ${args.quote}`);
          yield this.twitterClient.v2.quote(args.quote, args.tweet_id);
          return new ExecutableGameFunctionResponse(
            ExecutableGameFunctionStatus.Done,
            "Tweet quoted"
          );
        } catch (e) {
          return new ExecutableGameFunctionResponse(
            ExecutableGameFunctionStatus.Failed,
            "Failed to quote tweet"
          );
        }
      })
    });
  }
};
var twitterPlugin_default = TwitterPlugin;

// src/index.ts
var index_default = twitterPlugin_default;
export {
  index_default as default
};
